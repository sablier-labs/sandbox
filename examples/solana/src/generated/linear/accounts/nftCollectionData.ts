/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const NFT_COLLECTION_DATA_DISCRIMINATOR = new Uint8Array([
  159, 26, 37, 150, 44, 84, 171, 172,
]);

export function getNftCollectionDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    NFT_COLLECTION_DATA_DISCRIMINATOR
  );
}

export type NftCollectionData = {
  discriminator: ReadonlyUint8Array;
  totalSupply: bigint;
  bump: number;
};

export type NftCollectionDataArgs = {
  totalSupply: number | bigint;
  bump: number;
};

export function getNftCollectionDataEncoder(): FixedSizeEncoder<NftCollectionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['totalSupply', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NFT_COLLECTION_DATA_DISCRIMINATOR })
  );
}

export function getNftCollectionDataDecoder(): FixedSizeDecoder<NftCollectionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['totalSupply', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getNftCollectionDataCodec(): FixedSizeCodec<
  NftCollectionDataArgs,
  NftCollectionData
> {
  return combineCodec(
    getNftCollectionDataEncoder(),
    getNftCollectionDataDecoder()
  );
}

export function decodeNftCollectionData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NftCollectionData, TAddress>;
export function decodeNftCollectionData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NftCollectionData, TAddress>;
export function decodeNftCollectionData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<NftCollectionData, TAddress>
  | MaybeAccount<NftCollectionData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftCollectionDataDecoder()
  );
}

export async function fetchNftCollectionData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NftCollectionData, TAddress>> {
  const maybeAccount = await fetchMaybeNftCollectionData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftCollectionData<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NftCollectionData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftCollectionData(maybeAccount);
}

export async function fetchAllNftCollectionData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NftCollectionData>[]> {
  const maybeAccounts = await fetchAllMaybeNftCollectionData(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftCollectionData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NftCollectionData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeNftCollectionData(maybeAccount)
  );
}

export function getNftCollectionDataSize(): number {
  return 17;
}
