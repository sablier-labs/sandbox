/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getAmountsDecoder,
  getAmountsEncoder,
  getTimestampsDecoder,
  getTimestampsEncoder,
  type Amounts,
  type AmountsArgs,
  type Timestamps,
  type TimestampsArgs,
} from '../types';

export const STREAM_DATA_DISCRIMINATOR = new Uint8Array([
  61, 89, 148, 141, 154, 81, 86, 113,
]);

export function getStreamDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(STREAM_DATA_DISCRIMINATOR);
}

export type StreamData = {
  discriminator: ReadonlyUint8Array;
  amounts: Amounts;
  depositedTokenMint: Address;
  bump: number;
  salt: bigint;
  isCancelable: boolean;
  isDepleted: boolean;
  timestamps: Timestamps;
  sender: Address;
  wasCanceled: boolean;
};

export type StreamDataArgs = {
  amounts: AmountsArgs;
  depositedTokenMint: Address;
  bump: number;
  salt: number | bigint;
  isCancelable: boolean;
  isDepleted: boolean;
  timestamps: TimestampsArgs;
  sender: Address;
  wasCanceled: boolean;
};

export function getStreamDataEncoder(): FixedSizeEncoder<StreamDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amounts', getAmountsEncoder()],
      ['depositedTokenMint', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['salt', getU128Encoder()],
      ['isCancelable', getBooleanEncoder()],
      ['isDepleted', getBooleanEncoder()],
      ['timestamps', getTimestampsEncoder()],
      ['sender', getAddressEncoder()],
      ['wasCanceled', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: STREAM_DATA_DISCRIMINATOR })
  );
}

export function getStreamDataDecoder(): FixedSizeDecoder<StreamData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amounts', getAmountsDecoder()],
    ['depositedTokenMint', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['salt', getU128Decoder()],
    ['isCancelable', getBooleanDecoder()],
    ['isDepleted', getBooleanDecoder()],
    ['timestamps', getTimestampsDecoder()],
    ['sender', getAddressDecoder()],
    ['wasCanceled', getBooleanDecoder()],
  ]);
}

export function getStreamDataCodec(): FixedSizeCodec<
  StreamDataArgs,
  StreamData
> {
  return combineCodec(getStreamDataEncoder(), getStreamDataDecoder());
}

export function decodeStreamData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StreamData, TAddress>;
export function decodeStreamData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StreamData, TAddress>;
export function decodeStreamData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StreamData, TAddress> | MaybeAccount<StreamData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStreamDataDecoder()
  );
}

export async function fetchStreamData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StreamData, TAddress>> {
  const maybeAccount = await fetchMaybeStreamData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStreamData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StreamData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStreamData(maybeAccount);
}

export async function fetchAllStreamData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StreamData>[]> {
  const maybeAccounts = await fetchAllMaybeStreamData(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStreamData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StreamData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeStreamData(maybeAccount));
}

export function getStreamDataSize(): number {
  return 156;
}
