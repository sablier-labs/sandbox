/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STREAMED_AMOUNT_OF_DISCRIMINATOR = new Uint8Array([
  91, 69, 219, 48, 189, 26, 13, 33,
]);

export function getStreamedAmountOfDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STREAMED_AMOUNT_OF_DISCRIMINATOR
  );
}

export type StreamedAmountOfInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountStreamData extends string | AccountMeta<string> = string,
  TAccountStreamNftMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStreamData extends string
        ? ReadonlyAccount<TAccountStreamData>
        : TAccountStreamData,
      TAccountStreamNftMint extends string
        ? ReadonlyAccount<TAccountStreamNftMint>
        : TAccountStreamNftMint,
      ...TRemainingAccounts,
    ]
  >;

export type StreamedAmountOfInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type StreamedAmountOfInstructionDataArgs = {};

export function getStreamedAmountOfInstructionDataEncoder(): FixedSizeEncoder<StreamedAmountOfInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: STREAMED_AMOUNT_OF_DISCRIMINATOR })
  );
}

export function getStreamedAmountOfInstructionDataDecoder(): FixedSizeDecoder<StreamedAmountOfInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getStreamedAmountOfInstructionDataCodec(): FixedSizeCodec<
  StreamedAmountOfInstructionDataArgs,
  StreamedAmountOfInstructionData
> {
  return combineCodec(
    getStreamedAmountOfInstructionDataEncoder(),
    getStreamedAmountOfInstructionDataDecoder()
  );
}

export type StreamedAmountOfAsyncInput<
  TAccountStreamData extends string = string,
  TAccountStreamNftMint extends string = string,
> = {
  /** Read account: the account storing stream details. */
  streamData?: Address<TAccountStreamData>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
};

export async function getStreamedAmountOfInstructionAsync<
  TAccountStreamData extends string,
  TAccountStreamNftMint extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: StreamedAmountOfAsyncInput<TAccountStreamData, TAccountStreamNftMint>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StreamedAmountOfInstruction<
    TProgramAddress,
    TAccountStreamData,
    TAccountStreamNftMint
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    streamData: { value: input.streamData ?? null, isWritable: false },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.streamData.value) {
    accounts.streamData.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 114, 101, 97, 109, 95, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(expectAddress(accounts.streamNftMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamNftMint),
    ],
    data: getStreamedAmountOfInstructionDataEncoder().encode({}),
    programAddress,
  } as StreamedAmountOfInstruction<
    TProgramAddress,
    TAccountStreamData,
    TAccountStreamNftMint
  >);
}

export type StreamedAmountOfInput<
  TAccountStreamData extends string = string,
  TAccountStreamNftMint extends string = string,
> = {
  /** Read account: the account storing stream details. */
  streamData: Address<TAccountStreamData>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
};

export function getStreamedAmountOfInstruction<
  TAccountStreamData extends string,
  TAccountStreamNftMint extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: StreamedAmountOfInput<TAccountStreamData, TAccountStreamNftMint>,
  config?: { programAddress?: TProgramAddress }
): StreamedAmountOfInstruction<
  TProgramAddress,
  TAccountStreamData,
  TAccountStreamNftMint
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    streamData: { value: input.streamData ?? null, isWritable: false },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamNftMint),
    ],
    data: getStreamedAmountOfInstructionDataEncoder().encode({}),
    programAddress,
  } as StreamedAmountOfInstruction<
    TProgramAddress,
    TAccountStreamData,
    TAccountStreamNftMint
  >);
}

export type ParsedStreamedAmountOfInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Read account: the account storing stream details. */
    streamData: TAccountMetas[0];
    /** Read account: the mint account for the stream NFT. */
    streamNftMint: TAccountMetas[1];
  };
  data: StreamedAmountOfInstructionData;
};

export function parseStreamedAmountOfInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStreamedAmountOfInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { streamData: getNextAccount(), streamNftMint: getNextAccount() },
    data: getStreamedAmountOfInstructionDataDecoder().decode(instruction.data),
  };
}
