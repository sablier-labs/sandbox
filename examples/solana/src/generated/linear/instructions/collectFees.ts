/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_FEES_DISCRIMINATOR = new Uint8Array([
  164, 152, 207, 99, 30, 186, 19, 182,
]);

export function getCollectFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_FEES_DISCRIMINATOR
  );
}

export type CollectFeesInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountFeeCollector extends string | AccountMeta<string> = string,
  TAccountFeeRecipient extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFeeCollector extends string
        ? ReadonlySignerAccount<TAccountFeeCollector> &
            AccountSignerMeta<TAccountFeeCollector>
        : TAccountFeeCollector,
      TAccountFeeRecipient extends string
        ? WritableAccount<TAccountFeeRecipient>
        : TAccountFeeRecipient,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      ...TRemainingAccounts,
    ]
  >;

export type CollectFeesInstructionData = { discriminator: ReadonlyUint8Array };

export type CollectFeesInstructionDataArgs = {};

export function getCollectFeesInstructionDataEncoder(): FixedSizeEncoder<CollectFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: COLLECT_FEES_DISCRIMINATOR })
  );
}

export function getCollectFeesInstructionDataDecoder(): FixedSizeDecoder<CollectFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectFeesInstructionDataCodec(): FixedSizeCodec<
  CollectFeesInstructionDataArgs,
  CollectFeesInstructionData
> {
  return combineCodec(
    getCollectFeesInstructionDataEncoder(),
    getCollectFeesInstructionDataDecoder()
  );
}

export type CollectFeesAsyncInput<
  TAccountFeeCollector extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountTreasury extends string = string,
> = {
  /** Write account: the account authorized to collect fees from the treasury. */
  feeCollector: TransactionSigner<TAccountFeeCollector>;
  /** Write account: the address that will receive the collected fees. */
  feeRecipient: Address<TAccountFeeRecipient>;
  /** Write account: the treasury account that holds the fees. */
  treasury?: Address<TAccountTreasury>;
};

export async function getCollectFeesInstructionAsync<
  TAccountFeeCollector extends string,
  TAccountFeeRecipient extends string,
  TAccountTreasury extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: CollectFeesAsyncInput<
    TAccountFeeCollector,
    TAccountFeeRecipient,
    TAccountTreasury
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectFeesInstruction<
    TProgramAddress,
    TAccountFeeCollector,
    TAccountFeeRecipient,
    TAccountTreasury
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feeCollector: { value: input.feeCollector ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.feeCollector),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.treasury),
    ],
    data: getCollectFeesInstructionDataEncoder().encode({}),
    programAddress,
  } as CollectFeesInstruction<
    TProgramAddress,
    TAccountFeeCollector,
    TAccountFeeRecipient,
    TAccountTreasury
  >);
}

export type CollectFeesInput<
  TAccountFeeCollector extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountTreasury extends string = string,
> = {
  /** Write account: the account authorized to collect fees from the treasury. */
  feeCollector: TransactionSigner<TAccountFeeCollector>;
  /** Write account: the address that will receive the collected fees. */
  feeRecipient: Address<TAccountFeeRecipient>;
  /** Write account: the treasury account that holds the fees. */
  treasury: Address<TAccountTreasury>;
};

export function getCollectFeesInstruction<
  TAccountFeeCollector extends string,
  TAccountFeeRecipient extends string,
  TAccountTreasury extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: CollectFeesInput<
    TAccountFeeCollector,
    TAccountFeeRecipient,
    TAccountTreasury
  >,
  config?: { programAddress?: TProgramAddress }
): CollectFeesInstruction<
  TProgramAddress,
  TAccountFeeCollector,
  TAccountFeeRecipient,
  TAccountTreasury
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    feeCollector: { value: input.feeCollector ?? null, isWritable: false },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.feeCollector),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.treasury),
    ],
    data: getCollectFeesInstructionDataEncoder().encode({}),
    programAddress,
  } as CollectFeesInstruction<
    TProgramAddress,
    TAccountFeeCollector,
    TAccountFeeRecipient,
    TAccountTreasury
  >);
}

export type ParsedCollectFeesInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Write account: the account authorized to collect fees from the treasury. */
    feeCollector: TAccountMetas[0];
    /** Write account: the address that will receive the collected fees. */
    feeRecipient: TAccountMetas[1];
    /** Write account: the treasury account that holds the fees. */
    treasury: TAccountMetas[2];
  };
  data: CollectFeesInstructionData;
};

export function parseCollectFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      feeCollector: getNextAccount(),
      feeRecipient: getNextAccount(),
      treasury: getNextAccount(),
    },
    data: getCollectFeesInstructionDataDecoder().decode(instruction.data),
  };
}
