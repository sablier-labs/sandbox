/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const STREAM_EXISTS_DISCRIMINATOR = new Uint8Array([
  104, 209, 104, 97, 122, 35, 165, 195,
]);

export function getStreamExistsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STREAM_EXISTS_DISCRIMINATOR
  );
}

export type StreamExistsInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountStreamNftMint extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStreamNftMint extends string
        ? ReadonlyAccount<TAccountStreamNftMint>
        : TAccountStreamNftMint,
      ...TRemainingAccounts,
    ]
  >;

export type StreamExistsInstructionData = {
  discriminator: ReadonlyUint8Array;
  sender: Address;
  salt: bigint;
};

export type StreamExistsInstructionDataArgs = {
  sender: Address;
  salt: number | bigint;
};

export function getStreamExistsInstructionDataEncoder(): FixedSizeEncoder<StreamExistsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['sender', getAddressEncoder()],
      ['salt', getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STREAM_EXISTS_DISCRIMINATOR })
  );
}

export function getStreamExistsInstructionDataDecoder(): FixedSizeDecoder<StreamExistsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['sender', getAddressDecoder()],
    ['salt', getU128Decoder()],
  ]);
}

export function getStreamExistsInstructionDataCodec(): FixedSizeCodec<
  StreamExistsInstructionDataArgs,
  StreamExistsInstructionData
> {
  return combineCodec(
    getStreamExistsInstructionDataEncoder(),
    getStreamExistsInstructionDataDecoder()
  );
}

export type StreamExistsAsyncInput<
  TAccountStreamNftMint extends string = string,
> = {
  /** Read account: the mint account for the stream NFT. */
  streamNftMint?: Address<TAccountStreamNftMint>;
  sender: StreamExistsInstructionDataArgs['sender'];
  salt: StreamExistsInstructionDataArgs['salt'];
};

export async function getStreamExistsInstructionAsync<
  TAccountStreamNftMint extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: StreamExistsAsyncInput<TAccountStreamNftMint>,
  config?: { programAddress?: TProgramAddress }
): Promise<StreamExistsInstruction<TProgramAddress, TAccountStreamNftMint>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.streamNftMint.value) {
    accounts.streamNftMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 114, 101, 97, 109, 95, 110, 102, 116, 95, 109, 105, 110,
            116,
          ])
        ),
        getAddressEncoder().encode(expectSome(args.sender)),
        getU128Encoder().encode(expectSome(args.salt)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.streamNftMint)],
    data: getStreamExistsInstructionDataEncoder().encode(
      args as StreamExistsInstructionDataArgs
    ),
    programAddress,
  } as StreamExistsInstruction<TProgramAddress, TAccountStreamNftMint>);
}

export type StreamExistsInput<TAccountStreamNftMint extends string = string> = {
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
  sender: StreamExistsInstructionDataArgs['sender'];
  salt: StreamExistsInstructionDataArgs['salt'];
};

export function getStreamExistsInstruction<
  TAccountStreamNftMint extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: StreamExistsInput<TAccountStreamNftMint>,
  config?: { programAddress?: TProgramAddress }
): StreamExistsInstruction<TProgramAddress, TAccountStreamNftMint> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.streamNftMint)],
    data: getStreamExistsInstructionDataEncoder().encode(
      args as StreamExistsInstructionDataArgs
    ),
    programAddress,
  } as StreamExistsInstruction<TProgramAddress, TAccountStreamNftMint>);
}

export type ParsedStreamExistsInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Read account: the mint account for the stream NFT. */
    streamNftMint: TAccountMetas[0];
  };
  data: StreamExistsInstructionData;
};

export function parseStreamExistsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedStreamExistsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { streamNftMint: getNextAccount() },
    data: getStreamExistsInstructionDataDecoder().decode(instruction.data),
  };
}
