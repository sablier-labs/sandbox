/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CANCEL_DISCRIMINATOR = new Uint8Array([
  232, 219, 223, 41, 219, 236, 220, 190,
]);

export function getCancelDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CANCEL_DISCRIMINATOR);
}

export type CancelInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountSenderAta extends string | AccountMeta<string> = string,
  TAccountDepositedTokenMint extends string | AccountMeta<string> = string,
  TAccountStreamData extends string | AccountMeta<string> = string,
  TAccountStreamDataAta extends string | AccountMeta<string> = string,
  TAccountStreamNftMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountDepositedTokenProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSender extends string
        ? WritableSignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountSenderAta extends string
        ? WritableAccount<TAccountSenderAta>
        : TAccountSenderAta,
      TAccountDepositedTokenMint extends string
        ? ReadonlyAccount<TAccountDepositedTokenMint>
        : TAccountDepositedTokenMint,
      TAccountStreamData extends string
        ? WritableAccount<TAccountStreamData>
        : TAccountStreamData,
      TAccountStreamDataAta extends string
        ? WritableAccount<TAccountStreamDataAta>
        : TAccountStreamDataAta,
      TAccountStreamNftMint extends string
        ? ReadonlyAccount<TAccountStreamNftMint>
        : TAccountStreamNftMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountDepositedTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositedTokenProgram>
        : TAccountDepositedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CancelInstructionData = { discriminator: ReadonlyUint8Array };

export type CancelInstructionDataArgs = {};

export function getCancelInstructionDataEncoder(): FixedSizeEncoder<CancelInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CANCEL_DISCRIMINATOR })
  );
}

export function getCancelInstructionDataDecoder(): FixedSizeDecoder<CancelInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCancelInstructionDataCodec(): FixedSizeCodec<
  CancelInstructionDataArgs,
  CancelInstructionData
> {
  return combineCodec(
    getCancelInstructionDataEncoder(),
    getCancelInstructionDataDecoder()
  );
}

export type CancelAsyncInput<
  TAccountSender extends string = string,
  TAccountSenderAta extends string = string,
  TAccountDepositedTokenMint extends string = string,
  TAccountStreamData extends string = string,
  TAccountStreamDataAta extends string = string,
  TAccountStreamNftMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountDepositedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Write account: the sender of the stream who can cancel it. */
  sender: TransactionSigner<TAccountSender>;
  /** Create if needed account: the deposited token ATA owned by the sender. */
  senderAta?: Address<TAccountSenderAta>;
  /** Read account: the mint account of the deposited token. */
  depositedTokenMint: Address<TAccountDepositedTokenMint>;
  /** Write account: the stream data account storing stream details. */
  streamData?: Address<TAccountStreamData>;
  /** Write account: the deposited token ATA owned by the stream data account. */
  streamDataAta?: Address<TAccountStreamDataAta>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
  /** Program account: the Associated Token program. */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Program account: the Token program of the deposited token. */
  depositedTokenProgram: Address<TAccountDepositedTokenProgram>;
  /** Program account: the System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCancelInstructionAsync<
  TAccountSender extends string,
  TAccountSenderAta extends string,
  TAccountDepositedTokenMint extends string,
  TAccountStreamData extends string,
  TAccountStreamDataAta extends string,
  TAccountStreamNftMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountDepositedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: CancelAsyncInput<
    TAccountSender,
    TAccountSenderAta,
    TAccountDepositedTokenMint,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountDepositedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CancelInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountSenderAta,
    TAccountDepositedTokenMint,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountDepositedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sender: { value: input.sender ?? null, isWritable: true },
    senderAta: { value: input.senderAta ?? null, isWritable: true },
    depositedTokenMint: {
      value: input.depositedTokenMint ?? null,
      isWritable: false,
    },
    streamData: { value: input.streamData ?? null, isWritable: true },
    streamDataAta: { value: input.streamDataAta ?? null, isWritable: true },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    depositedTokenProgram: {
      value: input.depositedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.senderAta.value) {
    accounts.senderAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.sender.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.streamData.value) {
    accounts.streamData.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 114, 101, 97, 109, 95, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(expectAddress(accounts.streamNftMint.value)),
      ],
    });
  }
  if (!accounts.streamDataAta.value) {
    accounts.streamDataAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.streamData.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.senderAta),
      getAccountMeta(accounts.depositedTokenMint),
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamDataAta),
      getAccountMeta(accounts.streamNftMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.depositedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCancelInstructionDataEncoder().encode({}),
    programAddress,
  } as CancelInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountSenderAta,
    TAccountDepositedTokenMint,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountDepositedTokenProgram,
    TAccountSystemProgram
  >);
}

export type CancelInput<
  TAccountSender extends string = string,
  TAccountSenderAta extends string = string,
  TAccountDepositedTokenMint extends string = string,
  TAccountStreamData extends string = string,
  TAccountStreamDataAta extends string = string,
  TAccountStreamNftMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountDepositedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Write account: the sender of the stream who can cancel it. */
  sender: TransactionSigner<TAccountSender>;
  /** Create if needed account: the deposited token ATA owned by the sender. */
  senderAta: Address<TAccountSenderAta>;
  /** Read account: the mint account of the deposited token. */
  depositedTokenMint: Address<TAccountDepositedTokenMint>;
  /** Write account: the stream data account storing stream details. */
  streamData: Address<TAccountStreamData>;
  /** Write account: the deposited token ATA owned by the stream data account. */
  streamDataAta: Address<TAccountStreamDataAta>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
  /** Program account: the Associated Token program. */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Program account: the Token program of the deposited token. */
  depositedTokenProgram: Address<TAccountDepositedTokenProgram>;
  /** Program account: the System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCancelInstruction<
  TAccountSender extends string,
  TAccountSenderAta extends string,
  TAccountDepositedTokenMint extends string,
  TAccountStreamData extends string,
  TAccountStreamDataAta extends string,
  TAccountStreamNftMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountDepositedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: CancelInput<
    TAccountSender,
    TAccountSenderAta,
    TAccountDepositedTokenMint,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountDepositedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CancelInstruction<
  TProgramAddress,
  TAccountSender,
  TAccountSenderAta,
  TAccountDepositedTokenMint,
  TAccountStreamData,
  TAccountStreamDataAta,
  TAccountStreamNftMint,
  TAccountAssociatedTokenProgram,
  TAccountDepositedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sender: { value: input.sender ?? null, isWritable: true },
    senderAta: { value: input.senderAta ?? null, isWritable: true },
    depositedTokenMint: {
      value: input.depositedTokenMint ?? null,
      isWritable: false,
    },
    streamData: { value: input.streamData ?? null, isWritable: true },
    streamDataAta: { value: input.streamDataAta ?? null, isWritable: true },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    depositedTokenProgram: {
      value: input.depositedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.senderAta),
      getAccountMeta(accounts.depositedTokenMint),
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamDataAta),
      getAccountMeta(accounts.streamNftMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.depositedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCancelInstructionDataEncoder().encode({}),
    programAddress,
  } as CancelInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountSenderAta,
    TAccountDepositedTokenMint,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountDepositedTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedCancelInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Write account: the sender of the stream who can cancel it. */
    sender: TAccountMetas[0];
    /** Create if needed account: the deposited token ATA owned by the sender. */
    senderAta: TAccountMetas[1];
    /** Read account: the mint account of the deposited token. */
    depositedTokenMint: TAccountMetas[2];
    /** Write account: the stream data account storing stream details. */
    streamData: TAccountMetas[3];
    /** Write account: the deposited token ATA owned by the stream data account. */
    streamDataAta: TAccountMetas[4];
    /** Read account: the mint account for the stream NFT. */
    streamNftMint: TAccountMetas[5];
    /** Program account: the Associated Token program. */
    associatedTokenProgram: TAccountMetas[6];
    /** Program account: the Token program of the deposited token. */
    depositedTokenProgram: TAccountMetas[7];
    /** Program account: the System program. */
    systemProgram: TAccountMetas[8];
  };
  data: CancelInstructionData;
};

export function parseCancelInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCancelInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sender: getNextAccount(),
      senderAta: getNextAccount(),
      depositedTokenMint: getNextAccount(),
      streamData: getNextAccount(),
      streamDataAta: getNextAccount(),
      streamNftMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      depositedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCancelInstructionDataDecoder().decode(instruction.data),
  };
}
