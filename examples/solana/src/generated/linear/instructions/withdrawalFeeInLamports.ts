/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAWAL_FEE_IN_LAMPORTS_DISCRIMINATOR = new Uint8Array([
  55, 255, 88, 224, 223, 23, 97, 140,
]);

export function getWithdrawalFeeInLamportsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAWAL_FEE_IN_LAMPORTS_DISCRIMINATOR
  );
}

export type WithdrawalFeeInLamportsInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountChainlinkProgram extends string | AccountMeta<string> = string,
  TAccountChainlinkSolUsdFeed extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreasury extends string
        ? ReadonlyAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountChainlinkProgram extends string
        ? ReadonlyAccount<TAccountChainlinkProgram>
        : TAccountChainlinkProgram,
      TAccountChainlinkSolUsdFeed extends string
        ? ReadonlyAccount<TAccountChainlinkSolUsdFeed>
        : TAccountChainlinkSolUsdFeed,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawalFeeInLamportsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type WithdrawalFeeInLamportsInstructionDataArgs = {};

export function getWithdrawalFeeInLamportsInstructionDataEncoder(): FixedSizeEncoder<WithdrawalFeeInLamportsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: WITHDRAWAL_FEE_IN_LAMPORTS_DISCRIMINATOR,
    })
  );
}

export function getWithdrawalFeeInLamportsInstructionDataDecoder(): FixedSizeDecoder<WithdrawalFeeInLamportsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawalFeeInLamportsInstructionDataCodec(): FixedSizeCodec<
  WithdrawalFeeInLamportsInstructionDataArgs,
  WithdrawalFeeInLamportsInstructionData
> {
  return combineCodec(
    getWithdrawalFeeInLamportsInstructionDataEncoder(),
    getWithdrawalFeeInLamportsInstructionDataDecoder()
  );
}

export type WithdrawalFeeInLamportsAsyncInput<
  TAccountTreasury extends string = string,
  TAccountChainlinkProgram extends string = string,
  TAccountChainlinkSolUsdFeed extends string = string,
> = {
  /** Read account: the treasury account that receives the withdrawal fee. */
  treasury?: Address<TAccountTreasury>;
  /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
  chainlinkProgram: Address<TAccountChainlinkProgram>;
  /** Read account: The account providing the SOL/USD price feed data. */
  chainlinkSolUsdFeed: Address<TAccountChainlinkSolUsdFeed>;
};

export async function getWithdrawalFeeInLamportsInstructionAsync<
  TAccountTreasury extends string,
  TAccountChainlinkProgram extends string,
  TAccountChainlinkSolUsdFeed extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: WithdrawalFeeInLamportsAsyncInput<
    TAccountTreasury,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawalFeeInLamportsInstruction<
    TProgramAddress,
    TAccountTreasury,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treasury: { value: input.treasury ?? null, isWritable: false },
    chainlinkProgram: {
      value: input.chainlinkProgram ?? null,
      isWritable: false,
    },
    chainlinkSolUsdFeed: {
      value: input.chainlinkSolUsdFeed ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.chainlinkProgram),
      getAccountMeta(accounts.chainlinkSolUsdFeed),
    ],
    data: getWithdrawalFeeInLamportsInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawalFeeInLamportsInstruction<
    TProgramAddress,
    TAccountTreasury,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed
  >);
}

export type WithdrawalFeeInLamportsInput<
  TAccountTreasury extends string = string,
  TAccountChainlinkProgram extends string = string,
  TAccountChainlinkSolUsdFeed extends string = string,
> = {
  /** Read account: the treasury account that receives the withdrawal fee. */
  treasury: Address<TAccountTreasury>;
  /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
  chainlinkProgram: Address<TAccountChainlinkProgram>;
  /** Read account: The account providing the SOL/USD price feed data. */
  chainlinkSolUsdFeed: Address<TAccountChainlinkSolUsdFeed>;
};

export function getWithdrawalFeeInLamportsInstruction<
  TAccountTreasury extends string,
  TAccountChainlinkProgram extends string,
  TAccountChainlinkSolUsdFeed extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: WithdrawalFeeInLamportsInput<
    TAccountTreasury,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawalFeeInLamportsInstruction<
  TProgramAddress,
  TAccountTreasury,
  TAccountChainlinkProgram,
  TAccountChainlinkSolUsdFeed
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treasury: { value: input.treasury ?? null, isWritable: false },
    chainlinkProgram: {
      value: input.chainlinkProgram ?? null,
      isWritable: false,
    },
    chainlinkSolUsdFeed: {
      value: input.chainlinkSolUsdFeed ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.chainlinkProgram),
      getAccountMeta(accounts.chainlinkSolUsdFeed),
    ],
    data: getWithdrawalFeeInLamportsInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawalFeeInLamportsInstruction<
    TProgramAddress,
    TAccountTreasury,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed
  >);
}

export type ParsedWithdrawalFeeInLamportsInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Read account: the treasury account that receives the withdrawal fee. */
    treasury: TAccountMetas[0];
    /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
    chainlinkProgram: TAccountMetas[1];
    /** Read account: The account providing the SOL/USD price feed data. */
    chainlinkSolUsdFeed: TAccountMetas[2];
  };
  data: WithdrawalFeeInLamportsInstructionData;
};

export function parseWithdrawalFeeInLamportsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawalFeeInLamportsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      treasury: getNextAccount(),
      chainlinkProgram: getNextAccount(),
      chainlinkSolUsdFeed: getNextAccount(),
    },
    data: getWithdrawalFeeInLamportsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
