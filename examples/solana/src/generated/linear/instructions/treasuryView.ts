/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TREASURY_VIEW_DISCRIMINATOR = new Uint8Array([
  247, 160, 213, 237, 247, 121, 164, 82,
]);

export function getTreasuryViewDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TREASURY_VIEW_DISCRIMINATOR
  );
}

export type TreasuryViewInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTreasury extends string
        ? ReadonlyAccount<TAccountTreasury>
        : TAccountTreasury,
      ...TRemainingAccounts,
    ]
  >;

export type TreasuryViewInstructionData = { discriminator: ReadonlyUint8Array };

export type TreasuryViewInstructionDataArgs = {};

export function getTreasuryViewInstructionDataEncoder(): FixedSizeEncoder<TreasuryViewInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TREASURY_VIEW_DISCRIMINATOR })
  );
}

export function getTreasuryViewInstructionDataDecoder(): FixedSizeDecoder<TreasuryViewInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTreasuryViewInstructionDataCodec(): FixedSizeCodec<
  TreasuryViewInstructionDataArgs,
  TreasuryViewInstructionData
> {
  return combineCodec(
    getTreasuryViewInstructionDataEncoder(),
    getTreasuryViewInstructionDataDecoder()
  );
}

export type TreasuryViewAsyncInput<TAccountTreasury extends string = string> = {
  /** Read account: the account storing the treasury details. */
  treasury?: Address<TAccountTreasury>;
};

export async function getTreasuryViewInstructionAsync<
  TAccountTreasury extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: TreasuryViewAsyncInput<TAccountTreasury>,
  config?: { programAddress?: TProgramAddress }
): Promise<TreasuryViewInstruction<TProgramAddress, TAccountTreasury>> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treasury: { value: input.treasury ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.treasury)],
    data: getTreasuryViewInstructionDataEncoder().encode({}),
    programAddress,
  } as TreasuryViewInstruction<TProgramAddress, TAccountTreasury>);
}

export type TreasuryViewInput<TAccountTreasury extends string = string> = {
  /** Read account: the account storing the treasury details. */
  treasury: Address<TAccountTreasury>;
};

export function getTreasuryViewInstruction<
  TAccountTreasury extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: TreasuryViewInput<TAccountTreasury>,
  config?: { programAddress?: TProgramAddress }
): TreasuryViewInstruction<TProgramAddress, TAccountTreasury> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    treasury: { value: input.treasury ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.treasury)],
    data: getTreasuryViewInstructionDataEncoder().encode({}),
    programAddress,
  } as TreasuryViewInstruction<TProgramAddress, TAccountTreasury>);
}

export type ParsedTreasuryViewInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Read account: the account storing the treasury details. */
    treasury: TAccountMetas[0];
  };
  data: TreasuryViewInstructionData;
};

export function parseTreasuryViewInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTreasuryViewInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { treasury: getNextAccount() },
    data: getTreasuryViewInstructionDataDecoder().decode(instruction.data),
  };
}
