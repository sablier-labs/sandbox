/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeTokenInstruction,
  type ParsedMintTokenToInstruction,
} from '../instructions';

export const SOLANA_SPL_FAUCET_PROGRAM_ADDRESS =
  'DVE8KdM7uEPts5E6SHg6MnHKx6MHxtb8EwMbg7SU4Eba' as Address<'DVE8KdM7uEPts5E6SHg6MnHKx6MHxtb8EwMbg7SU4Eba'>;

export enum SolanaSplFaucetInstruction {
  InitializeToken,
  MintTokenTo,
}

export function identifySolanaSplFaucetInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SolanaSplFaucetInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 209, 150, 50, 190, 117, 16, 54])
      ),
      0
    )
  ) {
    return SolanaSplFaucetInstruction.InitializeToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 222, 27, 81, 229, 72, 190, 194])
      ),
      0
    )
  ) {
    return SolanaSplFaucetInstruction.MintTokenTo;
  }
  throw new Error(
    'The provided instruction could not be identified as a solanaSplFaucet instruction.'
  );
}

export type ParsedSolanaSplFaucetInstruction<
  TProgram extends string = 'DVE8KdM7uEPts5E6SHg6MnHKx6MHxtb8EwMbg7SU4Eba',
> =
  | ({
      instructionType: SolanaSplFaucetInstruction.InitializeToken;
    } & ParsedInitializeTokenInstruction<TProgram>)
  | ({
      instructionType: SolanaSplFaucetInstruction.MintTokenTo;
    } & ParsedMintTokenToInstruction<TProgram>);
