/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SABLIER_LOCKUP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_MAX_DISCRIMINATOR = new Uint8Array([
  32, 71, 46, 98, 105, 76, 85, 96,
]);

export function getWithdrawMaxDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_MAX_DISCRIMINATOR
  );
}

export type WithdrawMaxInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountStreamRecipient extends string | AccountMeta<string> = string,
  TAccountWithdrawalRecipient extends string | AccountMeta<string> = string,
  TAccountWithdrawalRecipientAta extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountDepositedTokenMint extends string | AccountMeta<string> = string,
  TAccountRecipientStreamNftAta extends string | AccountMeta<string> = string,
  TAccountStreamData extends string | AccountMeta<string> = string,
  TAccountStreamDataAta extends string | AccountMeta<string> = string,
  TAccountStreamNftMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountChainlinkProgram extends string | AccountMeta<string> = string,
  TAccountChainlinkSolUsdFeed extends string | AccountMeta<string> = string,
  TAccountDepositedTokenProgram extends string | AccountMeta<string> = string,
  TAccountNftTokenProgram extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountStreamRecipient extends string
        ? ReadonlyAccount<TAccountStreamRecipient>
        : TAccountStreamRecipient,
      TAccountWithdrawalRecipient extends string
        ? ReadonlyAccount<TAccountWithdrawalRecipient>
        : TAccountWithdrawalRecipient,
      TAccountWithdrawalRecipientAta extends string
        ? WritableAccount<TAccountWithdrawalRecipientAta>
        : TAccountWithdrawalRecipientAta,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountDepositedTokenMint extends string
        ? ReadonlyAccount<TAccountDepositedTokenMint>
        : TAccountDepositedTokenMint,
      TAccountRecipientStreamNftAta extends string
        ? ReadonlyAccount<TAccountRecipientStreamNftAta>
        : TAccountRecipientStreamNftAta,
      TAccountStreamData extends string
        ? WritableAccount<TAccountStreamData>
        : TAccountStreamData,
      TAccountStreamDataAta extends string
        ? WritableAccount<TAccountStreamDataAta>
        : TAccountStreamDataAta,
      TAccountStreamNftMint extends string
        ? ReadonlyAccount<TAccountStreamNftMint>
        : TAccountStreamNftMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountChainlinkProgram extends string
        ? ReadonlyAccount<TAccountChainlinkProgram>
        : TAccountChainlinkProgram,
      TAccountChainlinkSolUsdFeed extends string
        ? ReadonlyAccount<TAccountChainlinkSolUsdFeed>
        : TAccountChainlinkSolUsdFeed,
      TAccountDepositedTokenProgram extends string
        ? ReadonlyAccount<TAccountDepositedTokenProgram>
        : TAccountDepositedTokenProgram,
      TAccountNftTokenProgram extends string
        ? ReadonlyAccount<TAccountNftTokenProgram>
        : TAccountNftTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawMaxInstructionData = { discriminator: ReadonlyUint8Array };

export type WithdrawMaxInstructionDataArgs = {};

export function getWithdrawMaxInstructionDataEncoder(): FixedSizeEncoder<WithdrawMaxInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_MAX_DISCRIMINATOR })
  );
}

export function getWithdrawMaxInstructionDataDecoder(): FixedSizeDecoder<WithdrawMaxInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawMaxInstructionDataCodec(): FixedSizeCodec<
  WithdrawMaxInstructionDataArgs,
  WithdrawMaxInstructionData
> {
  return combineCodec(
    getWithdrawMaxInstructionDataEncoder(),
    getWithdrawMaxInstructionDataDecoder()
  );
}

export type WithdrawMaxAsyncInput<
  TAccountSigner extends string = string,
  TAccountStreamRecipient extends string = string,
  TAccountWithdrawalRecipient extends string = string,
  TAccountWithdrawalRecipientAta extends string = string,
  TAccountTreasury extends string = string,
  TAccountDepositedTokenMint extends string = string,
  TAccountRecipientStreamNftAta extends string = string,
  TAccountStreamData extends string = string,
  TAccountStreamDataAta extends string = string,
  TAccountStreamNftMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountChainlinkProgram extends string = string,
  TAccountChainlinkSolUsdFeed extends string = string,
  TAccountDepositedTokenProgram extends string = string,
  TAccountNftTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Write account: the signer of the withdrawal who pays the withdrawal fee. */
  signer: TransactionSigner<TAccountSigner>;
  /** Read account: the recipient of the stream who owns the stream NFT. */
  streamRecipient: Address<TAccountStreamRecipient>;
  /**
   * Read account: the account that will receive the withdrawn tokens.
   * recipient.
   */
  withdrawalRecipient: Address<TAccountWithdrawalRecipient>;
  /** Create if needed account: the ATA for deposited tokens owned by withdrawal recipient. */
  withdrawalRecipientAta?: Address<TAccountWithdrawalRecipientAta>;
  /** Write account: the treasury account that receives the withdrawal fee. */
  treasury?: Address<TAccountTreasury>;
  /** Read account: the mint account for the deposited token. */
  depositedTokenMint: Address<TAccountDepositedTokenMint>;
  /**
   * Read account: the ATA for the stream NFT owned by recipient.
   *
   */
  recipientStreamNftAta?: Address<TAccountRecipientStreamNftAta>;
  /** Write account: the account storing the stream data. */
  streamData?: Address<TAccountStreamData>;
  /** Write account: the ATA for deposited tokens owned by stream data. */
  streamDataAta?: Address<TAccountStreamDataAta>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
  /** Program account: the Associated Token program. */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
  chainlinkProgram: Address<TAccountChainlinkProgram>;
  /** Read account: The account providing the SOL/USD price feed data. */
  chainlinkSolUsdFeed: Address<TAccountChainlinkSolUsdFeed>;
  /** Program account: the Token program of the deposited token. */
  depositedTokenProgram: Address<TAccountDepositedTokenProgram>;
  /** Program account: the Token program of the stream NFT. */
  nftTokenProgram: Address<TAccountNftTokenProgram>;
  /** Program account: the System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getWithdrawMaxInstructionAsync<
  TAccountSigner extends string,
  TAccountStreamRecipient extends string,
  TAccountWithdrawalRecipient extends string,
  TAccountWithdrawalRecipientAta extends string,
  TAccountTreasury extends string,
  TAccountDepositedTokenMint extends string,
  TAccountRecipientStreamNftAta extends string,
  TAccountStreamData extends string,
  TAccountStreamDataAta extends string,
  TAccountStreamNftMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountChainlinkProgram extends string,
  TAccountChainlinkSolUsdFeed extends string,
  TAccountDepositedTokenProgram extends string,
  TAccountNftTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: WithdrawMaxAsyncInput<
    TAccountSigner,
    TAccountStreamRecipient,
    TAccountWithdrawalRecipient,
    TAccountWithdrawalRecipientAta,
    TAccountTreasury,
    TAccountDepositedTokenMint,
    TAccountRecipientStreamNftAta,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed,
    TAccountDepositedTokenProgram,
    TAccountNftTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawMaxInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStreamRecipient,
    TAccountWithdrawalRecipient,
    TAccountWithdrawalRecipientAta,
    TAccountTreasury,
    TAccountDepositedTokenMint,
    TAccountRecipientStreamNftAta,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed,
    TAccountDepositedTokenProgram,
    TAccountNftTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    streamRecipient: {
      value: input.streamRecipient ?? null,
      isWritable: false,
    },
    withdrawalRecipient: {
      value: input.withdrawalRecipient ?? null,
      isWritable: false,
    },
    withdrawalRecipientAta: {
      value: input.withdrawalRecipientAta ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    depositedTokenMint: {
      value: input.depositedTokenMint ?? null,
      isWritable: false,
    },
    recipientStreamNftAta: {
      value: input.recipientStreamNftAta ?? null,
      isWritable: false,
    },
    streamData: { value: input.streamData ?? null, isWritable: true },
    streamDataAta: { value: input.streamDataAta ?? null, isWritable: true },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    chainlinkProgram: {
      value: input.chainlinkProgram ?? null,
      isWritable: false,
    },
    chainlinkSolUsdFeed: {
      value: input.chainlinkSolUsdFeed ?? null,
      isWritable: false,
    },
    depositedTokenProgram: {
      value: input.depositedTokenProgram ?? null,
      isWritable: false,
    },
    nftTokenProgram: {
      value: input.nftTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.withdrawalRecipientAta.value) {
    accounts.withdrawalRecipientAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.withdrawalRecipient.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 114, 101, 97, 115, 117, 114, 121])
        ),
      ],
    });
  }
  if (!accounts.recipientStreamNftAta.value) {
    accounts.recipientStreamNftAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.streamRecipient.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.nftTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.streamNftMint.value)),
      ],
    });
  }
  if (!accounts.streamData.value) {
    accounts.streamData.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([115, 116, 114, 101, 97, 109, 95, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(expectAddress(accounts.streamNftMint.value)),
      ],
    });
  }
  if (!accounts.streamDataAta.value) {
    accounts.streamDataAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.streamData.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.depositedTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.streamRecipient),
      getAccountMeta(accounts.withdrawalRecipient),
      getAccountMeta(accounts.withdrawalRecipientAta),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.depositedTokenMint),
      getAccountMeta(accounts.recipientStreamNftAta),
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamDataAta),
      getAccountMeta(accounts.streamNftMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.chainlinkProgram),
      getAccountMeta(accounts.chainlinkSolUsdFeed),
      getAccountMeta(accounts.depositedTokenProgram),
      getAccountMeta(accounts.nftTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getWithdrawMaxInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawMaxInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStreamRecipient,
    TAccountWithdrawalRecipient,
    TAccountWithdrawalRecipientAta,
    TAccountTreasury,
    TAccountDepositedTokenMint,
    TAccountRecipientStreamNftAta,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed,
    TAccountDepositedTokenProgram,
    TAccountNftTokenProgram,
    TAccountSystemProgram
  >);
}

export type WithdrawMaxInput<
  TAccountSigner extends string = string,
  TAccountStreamRecipient extends string = string,
  TAccountWithdrawalRecipient extends string = string,
  TAccountWithdrawalRecipientAta extends string = string,
  TAccountTreasury extends string = string,
  TAccountDepositedTokenMint extends string = string,
  TAccountRecipientStreamNftAta extends string = string,
  TAccountStreamData extends string = string,
  TAccountStreamDataAta extends string = string,
  TAccountStreamNftMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountChainlinkProgram extends string = string,
  TAccountChainlinkSolUsdFeed extends string = string,
  TAccountDepositedTokenProgram extends string = string,
  TAccountNftTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Write account: the signer of the withdrawal who pays the withdrawal fee. */
  signer: TransactionSigner<TAccountSigner>;
  /** Read account: the recipient of the stream who owns the stream NFT. */
  streamRecipient: Address<TAccountStreamRecipient>;
  /**
   * Read account: the account that will receive the withdrawn tokens.
   * recipient.
   */
  withdrawalRecipient: Address<TAccountWithdrawalRecipient>;
  /** Create if needed account: the ATA for deposited tokens owned by withdrawal recipient. */
  withdrawalRecipientAta: Address<TAccountWithdrawalRecipientAta>;
  /** Write account: the treasury account that receives the withdrawal fee. */
  treasury: Address<TAccountTreasury>;
  /** Read account: the mint account for the deposited token. */
  depositedTokenMint: Address<TAccountDepositedTokenMint>;
  /**
   * Read account: the ATA for the stream NFT owned by recipient.
   *
   */
  recipientStreamNftAta: Address<TAccountRecipientStreamNftAta>;
  /** Write account: the account storing the stream data. */
  streamData: Address<TAccountStreamData>;
  /** Write account: the ATA for deposited tokens owned by stream data. */
  streamDataAta: Address<TAccountStreamDataAta>;
  /** Read account: the mint account for the stream NFT. */
  streamNftMint: Address<TAccountStreamNftMint>;
  /** Program account: the Associated Token program. */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
  chainlinkProgram: Address<TAccountChainlinkProgram>;
  /** Read account: The account providing the SOL/USD price feed data. */
  chainlinkSolUsdFeed: Address<TAccountChainlinkSolUsdFeed>;
  /** Program account: the Token program of the deposited token. */
  depositedTokenProgram: Address<TAccountDepositedTokenProgram>;
  /** Program account: the Token program of the stream NFT. */
  nftTokenProgram: Address<TAccountNftTokenProgram>;
  /** Program account: the System program. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getWithdrawMaxInstruction<
  TAccountSigner extends string,
  TAccountStreamRecipient extends string,
  TAccountWithdrawalRecipient extends string,
  TAccountWithdrawalRecipientAta extends string,
  TAccountTreasury extends string,
  TAccountDepositedTokenMint extends string,
  TAccountRecipientStreamNftAta extends string,
  TAccountStreamData extends string,
  TAccountStreamDataAta extends string,
  TAccountStreamNftMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountChainlinkProgram extends string,
  TAccountChainlinkSolUsdFeed extends string,
  TAccountDepositedTokenProgram extends string,
  TAccountNftTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
>(
  input: WithdrawMaxInput<
    TAccountSigner,
    TAccountStreamRecipient,
    TAccountWithdrawalRecipient,
    TAccountWithdrawalRecipientAta,
    TAccountTreasury,
    TAccountDepositedTokenMint,
    TAccountRecipientStreamNftAta,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed,
    TAccountDepositedTokenProgram,
    TAccountNftTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawMaxInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountStreamRecipient,
  TAccountWithdrawalRecipient,
  TAccountWithdrawalRecipientAta,
  TAccountTreasury,
  TAccountDepositedTokenMint,
  TAccountRecipientStreamNftAta,
  TAccountStreamData,
  TAccountStreamDataAta,
  TAccountStreamNftMint,
  TAccountAssociatedTokenProgram,
  TAccountChainlinkProgram,
  TAccountChainlinkSolUsdFeed,
  TAccountDepositedTokenProgram,
  TAccountNftTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SABLIER_LOCKUP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    streamRecipient: {
      value: input.streamRecipient ?? null,
      isWritable: false,
    },
    withdrawalRecipient: {
      value: input.withdrawalRecipient ?? null,
      isWritable: false,
    },
    withdrawalRecipientAta: {
      value: input.withdrawalRecipientAta ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    depositedTokenMint: {
      value: input.depositedTokenMint ?? null,
      isWritable: false,
    },
    recipientStreamNftAta: {
      value: input.recipientStreamNftAta ?? null,
      isWritable: false,
    },
    streamData: { value: input.streamData ?? null, isWritable: true },
    streamDataAta: { value: input.streamDataAta ?? null, isWritable: true },
    streamNftMint: { value: input.streamNftMint ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    chainlinkProgram: {
      value: input.chainlinkProgram ?? null,
      isWritable: false,
    },
    chainlinkSolUsdFeed: {
      value: input.chainlinkSolUsdFeed ?? null,
      isWritable: false,
    },
    depositedTokenProgram: {
      value: input.depositedTokenProgram ?? null,
      isWritable: false,
    },
    nftTokenProgram: {
      value: input.nftTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.streamRecipient),
      getAccountMeta(accounts.withdrawalRecipient),
      getAccountMeta(accounts.withdrawalRecipientAta),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.depositedTokenMint),
      getAccountMeta(accounts.recipientStreamNftAta),
      getAccountMeta(accounts.streamData),
      getAccountMeta(accounts.streamDataAta),
      getAccountMeta(accounts.streamNftMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.chainlinkProgram),
      getAccountMeta(accounts.chainlinkSolUsdFeed),
      getAccountMeta(accounts.depositedTokenProgram),
      getAccountMeta(accounts.nftTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getWithdrawMaxInstructionDataEncoder().encode({}),
    programAddress,
  } as WithdrawMaxInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountStreamRecipient,
    TAccountWithdrawalRecipient,
    TAccountWithdrawalRecipientAta,
    TAccountTreasury,
    TAccountDepositedTokenMint,
    TAccountRecipientStreamNftAta,
    TAccountStreamData,
    TAccountStreamDataAta,
    TAccountStreamNftMint,
    TAccountAssociatedTokenProgram,
    TAccountChainlinkProgram,
    TAccountChainlinkSolUsdFeed,
    TAccountDepositedTokenProgram,
    TAccountNftTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedWithdrawMaxInstruction<
  TProgram extends string = typeof SABLIER_LOCKUP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Write account: the signer of the withdrawal who pays the withdrawal fee. */
    signer: TAccountMetas[0];
    /** Read account: the recipient of the stream who owns the stream NFT. */
    streamRecipient: TAccountMetas[1];
    /**
     * Read account: the account that will receive the withdrawn tokens.
     * recipient.
     */
    withdrawalRecipient: TAccountMetas[2];
    /** Create if needed account: the ATA for deposited tokens owned by withdrawal recipient. */
    withdrawalRecipientAta: TAccountMetas[3];
    /** Write account: the treasury account that receives the withdrawal fee. */
    treasury: TAccountMetas[4];
    /** Read account: the mint account for the deposited token. */
    depositedTokenMint: TAccountMetas[5];
    /**
     * Read account: the ATA for the stream NFT owned by recipient.
     *
     */
    recipientStreamNftAta: TAccountMetas[6];
    /** Write account: the account storing the stream data. */
    streamData: TAccountMetas[7];
    /** Write account: the ATA for deposited tokens owned by stream data. */
    streamDataAta: TAccountMetas[8];
    /** Read account: the mint account for the stream NFT. */
    streamNftMint: TAccountMetas[9];
    /** Program account: the Associated Token program. */
    associatedTokenProgram: TAccountMetas[10];
    /** Read account: The Chainlink program used to retrieve on-chain price feeds. */
    chainlinkProgram: TAccountMetas[11];
    /** Read account: The account providing the SOL/USD price feed data. */
    chainlinkSolUsdFeed: TAccountMetas[12];
    /** Program account: the Token program of the deposited token. */
    depositedTokenProgram: TAccountMetas[13];
    /** Program account: the Token program of the stream NFT. */
    nftTokenProgram: TAccountMetas[14];
    /** Program account: the System program. */
    systemProgram: TAccountMetas[15];
  };
  data: WithdrawMaxInstructionData;
};

export function parseWithdrawMaxInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawMaxInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      streamRecipient: getNextAccount(),
      withdrawalRecipient: getNextAccount(),
      withdrawalRecipientAta: getNextAccount(),
      treasury: getNextAccount(),
      depositedTokenMint: getNextAccount(),
      recipientStreamNftAta: getNextAccount(),
      streamData: getNextAccount(),
      streamDataAta: getNextAccount(),
      streamNftMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      chainlinkProgram: getNextAccount(),
      chainlinkSolUsdFeed: getNextAccount(),
      depositedTokenProgram: getNextAccount(),
      nftTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawMaxInstructionDataDecoder().decode(instruction.data),
  };
}
